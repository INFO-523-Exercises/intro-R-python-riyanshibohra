---
title: "Introduction to R"
author: "Riyanshi Bohra"
format: html
editor: visual
---

# Introduction to R

#### Checking the current version of R:

```{r}
R.version
```

#### Installing the DMwR2 package:

```{r}
install.packages("DMwR2")
```

```{r}
help(package="DMwR2")
```

```{r}
library(DMwR2)
```

```{r}
data(algae)
algae
```

```{r}
manyNAs(algae)
```

```{r}
library()
```

```{r}
(.packages())
```

# Installing the dbplyr package:

```{r}
install.packages("dbplyr") 

```

```{r}
library(dbplyr) 
```

```{r}
(.packages())
```

```{r}
detach("package:dbplyr", unload=TRUE) 
```

```{r}
(.packages())
```

```{r}
library(dplyr)
```

```{r}
installed.packages() 
```

```{r}
old.packages()
```

```{r}
update.packages()
```

```{r}
update.packages(ask = FALSE)
```

```{r}
mean
```

```{r}
help(mean)
```

```{r}
RSiteSearch('neural networks')
```

```{r}
vat <- 0.2
```

```{r}
vat
```

```{r}
(vat <- 0.2)
```

```{r}
x <- 5
y <- vat * x
y
```

```{r}
z <-(y/2)^2
y
```

```{r}
z
```

```{r}
ls()
```

```{r}
rm(vat)
```

```{r}
max(4, 5, 6, 12, -4)
```

```{r}
mean(4, 5, 6, 12, -4)
```

```{r}
max(sample(1:100, 30))
```

```{r}
mean(sample(1:100, 30))
```

```{r}
set.seed(1) 
rnorm(1)
```

```{r}
rnorm(1)
```

```{r}
set.seed(2)
rnorm(1)
```

```{r}
rnorm(1)
```

```{r}
exists("se")
```

```{r}
se <- function(x){
  variance <- var(x)
  n <-length(x)
  return (sqrt(variance/n))
}
```

```{r}
exists("se")
```

```{r}
convMeters <- function (x, to="inch"){
  factor = switch(to, inch=39.3701, foot=3.28084, yard=1.09361, mile=0.000621371, NA)
  if(is.na(factor)) stop ("unknown target unit")
  else return (x*factor)
}
convMeters(23, "foot")
```

```{r}
convMeters(40)
```

```{r}
convMeters(56.2, "yard")
```

```{r}
convMeters(to="yard", 56.2)
```

```{r}
g <-c('f', 'm', 'f', 'f', 'f', 'm', 'm', 'f')
g <- factor(g)
```

```{r}
other.g <-factor(c('m', 'm', 'm', 'm'), levels= c('f', 'm'))
other.g
```

```{r}
other.g <-factor(c('m', 'm', 'm', 'm'))
other.g
```

```{r}
g <- factor(c('f', 'm', 'f', 'f', 'f', 'm', 'm', 'f'))
table(g)
```

```{r}
a <- factor(c('adult', 'juvenile','adult', 'juvenile','adult', 'juvenile','juvenile', 'juvenile'))
table(a, g)
```

```{r}
#a <- factor(c('adult', 'juvenile','adult', 'juvenile','adult', 'juvenile','juvenile'))
#table(a, g)
```

```{r}
a <- factor(c('adult', 'juvenile','adult', 'juvenile','adult', 'juvenile','juvenile', 'juvenile'))
t <- table(a, g)
t
```

```{r}
margin.table(t, 1)
```

```{r}
margin.table(t, 2)
```

```{r}
t
```

```{r}
prop.table(t, 1) 
```

```{r}
prop.table(t, 2)
```

```{r}
prop.table(t) 
```

```{r}
prop.table(t) * 100
```

```{r}
v <- c(2, 5, 3, 4)
length(v)
```

```{r}
mode(v)
```

```{r}
v <- c(2, 5, 3, 4, 'me')
mode(v)
```

```{r}
v
```

```{r}
v <- c(2, 5, 3, 4, NA)
mode(v)
```

```{r}
v
```

```{r}
b <- c(TRUE, FALSE, NA, TRUE)
mode(b)
```

```{r}
b
```

```{r}
b[3]
```

```{r}
b[3] <- TRUE
b
```

```{r}
b[10] <- FALSE
b
```

```{r}
e <-vector()
mode(e)
```

```{r}
e <- c()
mode(e)
```

```{r}
length(e)
```

```{r}
b2 <-c(b[1], b[3], b[5])
b2
```

```{r}
sqrt(v)
```

```{r}
v1 <- c(3, 6, 9)
v2 <- c(1, 4, 8)
v1+v2 
```

```{r}
v1*v2 
```

```{r}
v1-v2 
```

```{r}
v1/v2 
```

```{r}
v3 <- c(1, 4)
v1+v3
```

```{r}
2*v1
```

```{r}
mysum <- function (x){
  sum <- 0
  for(i in 1:length(x)){
    sum <- sum + x[i]
  }
  return (sum)
}

(mysum (c(1, 2, 3)))
```

```{r}
(x <-1:10)
```

```{r}
(x <-10:1)
```

```{r}
10:15-1
```

```{r}
10:(15-1)
```

```{r}
(seq(from=1, to=5, length=4)) 
```

```{r}
(seq(length=10, from=-2, by=0.5)) 
```

```{r}
(rep(5, 10))
```

```{r}
(rep("hi", 3))
```

```{r}
(rep(1:2, 3))
```

```{r}
(rep(TRUE:FALSE, 3))
```

```{r}
(rep(1:2, each=3))
```

```{r}
gl(3, 5) 
```

```{r}
gl(2, 5, labels= c('female', 'male'))
```

```{r}

gl(2, 1, 20, labels=c('female', 'male'))
```

```{r}
n <- rep(1:2, each=3)
(n <- factor(n, 
             levels = c(1, 2),
             labels = c('female','male')
             ))
```

```{r}
n
```

```{r}
(rnorm(10, mean=10, sd=3))
```

```{r}
(rt(10, df=5))
```

### Exercise:

```{r}
data <- rnorm(100, mean = 20, sd = 4)
```

```{r}
# Calculating the standard error of the mean 
sem <- sd(data) / sqrt(length(data))
sem
```

```{r}
sample <- rnorm(100, mean=20, sd=4)
se(sample)
```

```{r}
x <- c(0, -3, 4, -1, 45, 90, -5)
(gtzero <- x[x>0])
```

```{r}
x <- c(0, -3, 4, -1, 45, 90, -5)
(x[x<=-2 | x>5])        
```

```{r}
(x[x>40 & x<100])
```

```{r}
x <- c(0, -3, 4, -1, 45, 90, -5)
(x[c(4, 6)])
```

```{r}
(y<-c(4,6)) 
```

```{r}
(x[y])
```

```{r}
(x[1:3])
```

```{r}
x <- c(0, -3, 4, -1, 45, 90, -5)
(x[-1])
```

```{r}
(x[-c(4, 6)])
```

```{r}
(x[-(1:3)])
```

```{r}
x <- c(0, -3, 4, -1, 45, 90, -5)
names(x) <- c('s1', 's2', 's3', 's4', 's5', 's6', 's7')
x
```

```{r}
(pH <- c(area1=4.5, area2=5.7, area3=9.8, mud=7.2))
```

```{r}
pH['mud']
```

```{r}
pH[c('area1', 'mud')]
```

```{r}
#x[-s1]
```

```{r}
#x[-"s1"]
```

```{r}
#x[s1:s7]
```

```{r}
#x[c('s1':'s7')]
```

```{r}
pH[]
```

```{r}
pH
```

```{r}
pH[] <- 0
pH
```

```{r}
pH<- 0
pH
```

```{r}
m <- c(45, 23, 66, 77, 33, 44, 56, 12, 78, 23)
is.vector(m)
```

```{r}
is.matrix(m)
```

```{r}
is.array(m)
```

```{r}
dim(m) <-c(2, 5)
m
```

```{r}
is.vector(m)
```

```{r}
is.matrix(m)
```

```{r}
is.array(m)
```

```{r}
(m <- matrix(c(45, 23, 66, 77, 33, 44, 56, 12, 78, 23), 2, 5, byrow = TRUE))
```

```{r}
test <-matrix(c(11, 11, 12, 13, 14, 9, 8, 5, 5, 6, 7, 8, 4, 3), 7, 2)
test
```

```{r}
m <- c(45, 23, 66, 77, 33, 44, 56, 12, 78, 23)
dim(m) <- c(2, 5)
m
```

```{r}
m[2, 3]
```

```{r}
(s<- m[2, 1])
```

```{r}
(m<- m [c(1,2), -c(3, 5)])
```

```{r}
(m [1, ])
```

```{r}
(v<-m [, 1])
  
```

```{r}
is.vector(m)
```

```{r}
is.matrix(m)
```

```{r}
is.vector(s)
```

```{r}
is.vector(v)
```

```{r}
is.matrix(v)
```

```{r}
m <- matrix(c(45, 23, 66, 77, 33, 44, 56, 12, 78, 23), 2, 5)
(m<-m [, 2, drop = FALSE])
```

```{r}
is.matrix(m)
```

```{r}
is.vector(m)
```

```{r}
cbind (c(1,2,3), c(4, 5, 6))
```

```{r}
rbind (c(1,2,3), c(4, 5, 6))
```

```{r}
m <- matrix(c(45, 23, 66, 77, 33, 44, 56, 12, 78, 23), 2, 5)
(a <- rbind (c(1,2,3,4,5), m))
```

```{r}
is.array(a)
```

```{r}
is.matrix(a)
```

```{r}
m1 <- matrix(rep(10, 9), 3, 3) 
m2 <- cbind (c(1,2,3), c(4, 5, 6))
m3 <- cbind (m1[,1], m2[2,]) 
m4 <- cbind (m1[,1], m2[,2])
```

```{r}
sales <- matrix(c(10, 30, 40, 50, 43, 56, 21, 30), 2, 4, byrow=TRUE)
colnames(sales) <- c('1qrt', '2qrt', '3qrt', '4qrt')
rownames(sales) <- c('store1', 'store2')
sales
```

```{r}
sales['store1', '1qrt']
```

```{r}
sales['store2', c('1qrt', '4qrt')]
```

```{r}
a <- array(1:48, dim= c(4, 3, 2))
a
```

```{r}
a [1, 3, 2]
```

```{r}
a [1, , 2]
```

```{r}
a [1, , 2, drop=FALSE]
```

```{r}
a [4, 3, ]
```

```{r}
a [c(2, 3), , -2]
```

```{r}
dimnames(a)[[1]] <-c("1qrt", "2qrt", "3qrt", "4qrt")
dimnames(a)[[2]] <-c("store1", "store2", "store3")
dimnames(a)[[3]] <-c("2017", "2018")
a
```

```{r}
ar <- array(data     = 1:27,
            dim      = c(3, 3, 3),
            dimnames = list(c("a", "b", "c"),             c("d", "e", "f"),                                                                       c("g", "h", "i")))
ar
```

```{r}
matrix1 <- ar[,,g]
```

```{r}
matrix1 <- ar[,,'g']
matrix1
```

```{r}
matrix2 <- ar[,,'h']
matrix2
```

```{r}
sum <-matrix1 + matrix2
sum
```

```{r}
matrix1*3
```

```{r}
matrix1
```

```{r}
matrix1*c(2, 3)
```

```{r}
matrix1*c(2,3,2,3,2,3,2,3,2)
```

```{r}
matrix1*c(1, 2, 3)
```

```{r}
matrix1/c(1, 2, 3)
```

```{r}
matrix1/c(1, 2, 3, 1, 2, 3, 1, 2, 3)
```

```{r}
mylist <- list(stud.id=34453,
               stud.name="John",
               stud.marks= c(13, 3, 12, 15, 19)
               )

mylist$stud.id
```

```{r}
mylist[1]
```

```{r}
mylist[[1]]

```

```{r}
mylist["stud.id"]
```

```{r}
handle <- "stud.id"
mylist[handle]
```

```{r}
mylist[["stud.id"]]
```

```{r}
mylist <- list(stud.id=34453,
               stud.name="John",
               stud.marks= c(13, 3, 12, 15, 19)
               )
mylist$stud.marks
```

```{r}
mylist$stud.marks[2]
```

```{r}
names(mylist)
```

```{r}
names(mylist) <- c('id','name','marks')

names(mylist)
  
```

```{r}
mylist
```

```{r}
mylist$parents.names <- c('Ana', "Mike")
mylist
```

```{r}
newlist <- list(age=19, sex="male");
expandedlist <-c(mylist, newlist)
expandedlist
```

```{r}
length(expandedlist)
```

```         
```

```{r}
expandedlist <- expandedlist[-5]
expandedlist <- expandedlist[c(-1,-5)]
expandedlist$parents.names <- NULL
expandedlist[['marks']] <- NULL
```

```{r}
mylist
```

```{r}
unlist(mylist)
```

```{r}
mode(mylist)
  
```

```{r}
mode(unlist(mylist))
```

```{r}
is.vector(unlist(mylist)) 
```

```{r}
is.list(mylist)
```

```{r}
is.atomic(mylist)
```

```{r}
is.list(unlist(mylist))
```

```{r}
my.dataframe <- data.frame(site=c('A', 'B', 'A','A', 'B'),
                           season=c('winter', 'summer', 'summer', 'spring', 'fall'),                               ph = c(7.4, 6.3, 8.6, 7.2, 8.9))
my.dataframe
```

```{r}
my.dataframe <- data.frame(site=c('A', 'B', 'A','A', 'B'),
                           season=c('winter', 'summer', 'summer', 'spring', 'fall'),                               ph = c(7.4, 6.3, 8.6, 7.2, 8.9))
my.dataframe[3, 2]
```

```{r}
my.dataframe[['site']]
```

```{r}
my.dataframe['site']
```

```{r}
my.dataframe[my.dataframe$ph>7, ]
```

```{r}
my.dataframe[my.dataframe$ph>7, 'site']
```

```{r}
my.dataframe[my.dataframe$ph>7, c('site', 'ph')]
```

```{r}
subset(my.dataframe, ph>7)
```

```{r}
subset(my.dataframe, ph>7, c("site", "ph"))
```

```{r}
subset(my.dataframe[1:2,], ph>7, c(site, ph))
```

```{r}
my.dataframe[my.dataframe$season=='summer', 'ph'] <- my.dataframe[my.dataframe$season=='summer', 'ph'] + 1 
                                                                  my.dataframe[my.dataframe$season=='summer', 'ph']
```

```{r}
my.dataframe[my.dataframe$season=='summer' & my.dataframe$ph>8, 'ph'] <- my.dataframe[my.dataframe$season=='summer' & my.dataframe$ph>8, 'ph'] + 1                                                              
        
my.dataframe[my.dataframe$season=='summer', 'ph']                             
```

```{r}
my.dataframe$NO3 <- c(234.5, 123.4, 456.7, 567.8, 789.0)
my.dataframe
```

```{r}
my.dataframe <- my.dataframe[, -4]
my.dataframe
```

```{r}
str(my.dataframe)
```

```{r}
#nrow(my.dataframe)``
```

```{r}
ncol(my.dataframe)
```

```{r}
dim(my.dataframe)
```

```{r}
 #edit(my.dataframe) 
 #View(my.dataframe) 
```

```{r}
names(my.dataframe)
```

```{r}
names(my.dataframe) <- c('area', 'season', 'P.h.')
my.dataframe
```

```{r}
names(my.dataframe)[3] <- 'ph'
my.dataframe 
```

```{r}
install.packages("tibble")

```

```{r}
library(tibble)
```

```{r}
my.tibble <- tibble(TempCels = sample(-10:40, size=100, replace=TRUE), 
                    TempFahr = TempCels*9/5+32,
                    Location = rep(letters[1:2], each=50))
my.tibble
```

```{r}
install.packages("palmerpenguins")
```

```{r}
library(palmerpenguins)
data(penguins)
dim(penguins)
class(penguins)
penguins
```

```{r}
pe <-as_tibble(penguins)
class(pe)
```

```{r}
pe
```

```{r}
x <- 1:16
mode(x)
```

```{r}
dim(x) <- c(4,4)
class(x) 
```

```{r}
is.numeric(x)
```

```{r}
mode(x) <- "character"
mode(x)
```

```{r}
class(x)
```

```{r}
x <- factor(x)
class(x)
```

```{r}
mode(x)
```

```{r}
is.array(x)
```

```{r}
is.list(x)
is.data.frame(x)
```

```{r}
is.matrix(x)
is_tibble(x)
is.vector(x)
typeof(x)
```

```{r}
class(pe[1:15, c("bill_length_mm", "bill_depth_mm")])
```

```{r}
class(penguins[1:15, c("bill_length_mm", "bill_depth_mm")])
```

```{r}
class(pe[1:15, c("bill_length_mm")])
class(penguins[1:15, c("bill_length_mm")])
```

```{r}
install.packages("dplyr")
```

```{r}
library(dplyr)
```

```{r}
select(filter(pe, species=="Adelie"), bill_length_mm, bill_depth_mm)
```

```{r}
filter(select(pe, bill_length_mm, bill_depth_mm, species), species=="Adelie")
```

```{r}
pe

```

```{r}
pe[pe$species=='Adelie', c("bill_length_mm", "bill_depth_mm")]
```

```{r}
subset(pe, pe$species=='Adelie', c("bill_length_mm", "bill_depth_mm"))
```

```{r}
select(pe, bill_length_mm, bill_depth_mm, species) |> filter(species=="Adelie")
```

```{r}
filter(pe, species=="Adelie") |> select(bill_length_mm, bill_depth_mm, species)
```

```{r}
students <- list(names=c("Judy", "Max", "Dan"),
                 grades=c(78, 85, 99))
print ("before:")
```

```{r}
students
```

```{r}
gradeConvertor<- function (grade){
  grade = as.numeric(grade)
  if(grade > 100 | grade < 0) print ("grade out of the range")
  else if(grade >= 90 & grade <= 100) return ("A")
  else if(grade >= 80 & grade < 90) return ("B")
  else if(grade >= 70 & grade < 80) return ("C")
  else return ("F")
}
for(i in 1:length(students$grades)){
  students$grades[i] = gradeConvertor(students$grades[i])
}

print ("after:")
```

```{r}
students
```
